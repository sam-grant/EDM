import numpy as np
import matplotlib.pyplot as plt

muR = 1000. # used to calculate the image currents (essentially 2 times the current (muR-1)/(muR+1)
# Currents we add if we add 1ppm radial field

top = np.array([-0.00923226, -0.00881767, -0.00841575, -0.00802651, -0.00764994,
       -0.00728605, -0.00693483, -0.00659628, -0.0062704 , -0.0059572 ,
       -0.00565668, -0.00536882, -0.00509364, -0.00483114, -0.0045813 ,
       -0.00434415, -0.00411966, -0.00390785, -0.00370871, -0.00352225,
       -0.00334845, -0.00318734, -0.00303889, -0.00290312, -0.00278003,
       -0.0026696 , -0.00257186, -0.00248678, -0.00241438, -0.00235465,
       -0.00230759, -0.00227321, -0.00225151, -0.00224247, -0.00224611,
       -0.00226242, -0.00229141, -0.00233307, -0.00238741, -0.00245441,
       -0.00253409, -0.00262645, -0.00273148, -0.00284918, -0.00297955,
       -0.0031226 , -0.00327833, -0.00344672, -0.00362779, -0.00382154,
       -0.00382002, -0.00362323, -0.00343912, -0.00326768, -0.00310892,
       -0.00296283, -0.00282941, -0.00270866, -0.00260059, -0.0025052 ,
       -0.00242248, -0.00235243, -0.00229505, -0.00225035, -0.00221832,
       -0.00219897, -0.00219228, -0.00219828, -0.00221694, -0.00224828,
       -0.0022923 , -0.00234898, -0.00241834, -0.00250038, -0.00259508,
       -0.00270247, -0.00282252, -0.00295525, -0.00310065, -0.00325873,
       -0.00342948, -0.0036129 , -0.00380899, -0.00401776, -0.00423921,
       -0.00447333, -0.00472012, -0.00497958, -0.00525172, -0.00553653,
       -0.00583402, -0.00614417, -0.00646701, -0.00680251, -0.00715069,
       -0.00751155, -0.00788507, -0.00827127, -0.00867015, -0.0090817 ])
bottom = np.array([0.00930973, 0.00889312, 0.0084892 , 0.00809799, 0.00771947,
       0.00735365, 0.00700052, 0.0066601 , 0.00633237, 0.00601733,
       0.005715  , 0.00542536, 0.00514842, 0.00488418, 0.00463263,
       0.00439378, 0.00416763, 0.00395417, 0.00375341, 0.00356535,
       0.00338999, 0.00322733, 0.00307736, 0.00294008, 0.00281551,
       0.00270363, 0.00260445, 0.00251797, 0.00244418, 0.0023831 ,
       0.00233471, 0.00229901, 0.00227601, 0.00226571, 0.00226811,
       0.00228321, 0.002311  , 0.00235149, 0.00240468, 0.00247056,
       0.00254914, 0.00264042, 0.00274439, 0.00286107, 0.00299044,
       0.0031325 , 0.00328727, 0.00345473, 0.00363489, 0.00382774,
       0.00382536, 0.00362773, 0.0034428 , 0.00327057, 0.00311104,
       0.0029642 , 0.00283006, 0.00270862, 0.00259987, 0.00250382,
       0.00242047, 0.00234982, 0.00229186, 0.0022466 , 0.00221404,
       0.00219418, 0.00218701, 0.00219254, 0.00221077, 0.00224169,
       0.00228531, 0.00234163, 0.00241064, 0.00249236, 0.00258677,
       0.00269387, 0.00281368, 0.00294618, 0.00309138, 0.00324928,
       0.00341987, 0.00360316, 0.00379915, 0.00400783, 0.00422921,
       0.00446329, 0.00471007, 0.00496954, 0.00524171, 0.00552658,
       0.00582415, 0.00613441, 0.00645737, 0.00679303, 0.00714138,
       0.00750243, 0.00787618, 0.00826263, 0.00866177, 0.00907361])

def B(x, orig, I):
   mu0 = np.pi * 4. * 1.0e-7
   r_ = x-orig
   r = np.sqrt((r_**2).sum(axis=1))
   n = np.array([r_[:,1],-r_[:,0]])/r
   return mu0 * I/(2.*np.pi) * (n/r).T

# grid on which the field is calculated
xx, yy  = np.meshgrid(np.arange(-45.,46.)/1000., np.arange(-45.,46.)/1000.)

# load the coils 
coil_pos = np.zeros([200,2])
coil_pos[:100,1] = 0.180/2.0  # y-distance 180mm 
coil_pos[100:,1] = -0.180/2.0 # y-distance 180mm 
for i in range(100):
    coil_pos[i,0] = (50-i)*0.0025 # 2.5mm
    coil_pos[i+100,0] = (50-i)*0.0025 # 2.5mm
coil_pos[:,0] = coil_pos[:,0] - 0.0025/2.
I = np.zeros([200])
I[:100] = top
I[100:] = bottom
I2 = I * ((muR-1)/(muR+1) + 1.)

# the calculation
pos = np.array([xx.reshape(-1), yy.reshape(-1)]).T
out = np.zeros_like(pos)
for j, s in enumerate(coil_pos):
    print(j, s, I[j], I2[j])
    out = out + B(pos, s, I2[j])


plt.imshow(out[:,0].reshape([91,91])/1.45*1e6, extent=[-45.,45.,-45.,45.]) # in ppm
cbar = plt.colorbar()
cbar.ax.set_title("[ppm]")
plt.xlabel("x (radial) [mm]")
plt.ylabel("y [mm]")
plt.title("radial field")
plt.tight_layout()
plt.show()
