import numpy as np
import matplotlib.pyplot as plt


# from rootpy.plotting import root2matplotlib as rplt
# from rootpy.plotting import Hist2D

muR = 1000. # used to calculate the image currents (essentially 2 times the current (muR-1)/(muR+1)
            # Doesn't really matter i it is 100 or 4000

d  = 0.088  # [m] magnet mid plane to surface coils
a  = 0.090  # [m] magnet mid plane to pole piece surface

# Values from run4-production-03.json 

bottom = np.array([0.143,0.159,0.175,0.191,0.207,0.219,0.233,0.244,0.255,0.265,
0.275,0.283,0.291,0.297,0.304,0.309,0.313,0.316,0.318,0.321,
0.321,0.321,0.319,0.319,0.316,0.313,0.308,0.304,0.298,0.290,
0.283,0.275,0.265,0.254,0.243,0.231,0.219,0.205,0.189,0.174,
0.158,0.142,0.123,0.104,0.084,0.065,0.043,0.021,-0.002,-0.027,
-0.028,-0.006,0.014,0.036,0.054,0.071,0.088,0.106,0.120,0.135,
0.148,0.161,0.173,0.185,0.195,0.204,0.213,0.222,0.228,0.234,
0.239,0.244,0.247,0.250,0.251,0.252,0.251,0.252,0.249,0.247,
0.243,0.239,0.233,0.228,0.222,0.214,0.207,0.197,0.186,0.175,
0.164,0.152,0.137,0.122,0.109,0.092,0.075,0.056,0.038,0.019 ])

top = np.array([-0.416,-0.419,-0.420,-0.422,-0.422,-0.422,-0.424,-0.423,-0.421,-0.420,
-0.417,-0.415,-0.411,-0.408,-0.404,-0.399,-0.393,-0.388,-0.381,-0.376,
-0.368,-0.360,-0.350,-0.344,-0.334,-0.323,-0.313,-0.301,-0.289,-0.278,
-0.266,-0.252,-0.238,-0.226,-0.211,-0.196,-0.180,-0.164,-0.148,-0.130,
-0.112,-0.095,-0.077,-0.058,-0.038,-0.018,0.004,0.025,0.046,0.069,0.068,
0.043,0.020,-0.003,-0.026,-0.048,-0.068,-0.090,-0.109,-0.131,-0.149,-0.167,
-0.185,-0.203,-0.219,-0.236,-0.253,-0.268,-0.284,-0.299,-0.313,-0.327,-0.339,
-0.353,-0.365,-0.377,-0.388,-0.397,-0.408,-0.416,-0.426,-0.433,-0.442,-0.452,
-0.458,-0.464,-0.470,-0.475,-0.480,-0.486,-0.488,-0.492,-0.495,-0.497,-0.499,
-0.500,-0.501,-0.502,-0.501,-0.502 ])

def B(x, orig, I):
   mu0 = np.pi * 4. * 1.0e-7
   r_ = x-orig
   r = np.sqrt((r_**2).sum(axis=1))
   n = np.array([r_[:,1],-r_[:,0]])/r
   return mu0 * I/(2.*np.pi) * (n/r).T

# grid on which the field is calculated
xx, yy  = np.meshgrid(np.arange(-45.,46.)/1000., np.arange(-45.,46.)/1000.)

# load the coils 
coil_pos = np.zeros([200,2])
coil_pos[:100,1] =  d
coil_pos[100:,1] = -d 
for i in range(100):
    coil_pos[i,0] = (50-i)*0.0025 # 2.5mm
    coil_pos[i+100,0] = (50-i)*0.0025 # 2.5mm
coil_pos[:,0] = coil_pos[:,0] - 0.0025/2.
I = np.zeros([200])
I[:100] = -1. #top
I[100:] =  1. #bottom

I[:100] = top
I[100:] = bottom
I_im = I * ((muR-1)/(muR+1)) # add image currents

# the calculation
pos  = np.array([xx.reshape(-1), yy.reshape(-1)]).T
out  = np.zeros_like(pos)
out_ = np.zeros_like(pos)

pos_real = coil_pos.copy()
top      = coil_pos[:,1] > 0
bottom   = coil_pos[:,1] < 0

for j, s in enumerate(coil_pos):
    #print(j, s, I[j], I_im[j])
    out   = out  +  B(pos, s,  I[j])
    out_  = out_ +  B(pos, s,  I[j])

for n in range(10): # image calculations, n is the order 
    pos_im1, pos_im2  = coil_pos.copy(), coil_pos.copy()
    print("top: ",  (-1)**n     * (2*(n+1)*a - d))
    print("     ",  (-1)**(n+1) * (2*(n+1)*a + d))
    pos_im1[top,1]    = (-1)**n *     (2*(n+1)*a - d)
    pos_im2[top,1]    = (-1)**(n+1) * (2*(n+1)*a + d)

    print("bottom: ",  -1. * ((-1)**n     * (2*(n+1)*a - d)))
    print("     ",     -1. * ((-1)**(n+1) * (2*(n+1)*a + d)))
    pos_im1[bottom,1]    = -1. * ((-1)**n *     (2*(n+1)*a - d))
    pos_im2[bottom,1]    = -1. * ((-1)**(n+1) * (2*(n+1)*a + d))

    for j, s in enumerate(coil_pos):
        out_ = out_ + B(pos, pos_im1[j],    I_im[j])
        out_ = out_ + B(pos, pos_im2[j],    I_im[j])

field_array = out_[:,0].reshape([91,91])/1.45*1e6

#plt.imshow(out_[:,0].reshape([91,91])/1.45*1e6 - out[:,0].reshape([91,91])/1.45*1e6, extent=[-45.,45.,-45.,45.]) # in ppm
plt.imshow(field_array, extent=[-45.,45.,-45.,45.]) # in ppm
cbar = plt.colorbar()
cbar.ax.set_title("[ppm]")
plt.xlabel("x (radial) [mm]")
plt.ylabel("y [mm]")
plt.title("radial field")
plt.tight_layout()
plt.show()

np.savetxt('../txt/SCC/field-map-run4-production-03.txt',out_[:,0])






# top = np.array([-0.00923226, -0.00881767, -0.00841575, -0.00802651, -0.00764994,
#        -0.00728605, -0.00693483, -0.00659628, -0.0062704 , -0.0059572 ,
#        -0.00565668, -0.00536882, -0.00509364, -0.00483114, -0.0045813 ,
#        -0.00434415, -0.00411966, -0.00390785, -0.00370871, -0.00352225,
#        -0.00334845, -0.00318734, -0.00303889, -0.00290312, -0.00278003,
#        -0.0026696 , -0.00257186, -0.00248678, -0.00241438, -0.00235465,
#        -0.00230759, -0.00227321, -0.00225151, -0.00224247, -0.00224611,
#        -0.00226242, -0.00229141, -0.00233307, -0.00238741, -0.00245441,
#        -0.00253409, -0.00262645, -0.00273148, -0.00284918, -0.00297955,
#        -0.0031226 , -0.00327833, -0.00344672, -0.00362779, -0.00382154,
#        -0.00382002, -0.00362323, -0.00343912, -0.00326768, -0.00310892,
#        -0.00296283, -0.00282941, -0.00270866, -0.00260059, -0.0025052 ,
#        -0.00242248, -0.00235243, -0.00229505, -0.00225035, -0.00221832,
#        -0.00219897, -0.00219228, -0.00219828, -0.00221694, -0.00224828,
#        -0.0022923 , -0.00234898, -0.00241834, -0.00250038, -0.00259508,
#        -0.00270247, -0.00282252, -0.00295525, -0.00310065, -0.00325873,
#        -0.00342948, -0.0036129 , -0.00380899, -0.00401776, -0.00423921,
#        -0.00447333, -0.00472012, -0.00497958, -0.00525172, -0.00553653,
#        -0.00583402, -0.00614417, -0.00646701, -0.00680251, -0.00715069,
#        -0.00751155, -0.00788507, -0.00827127, -0.00867015, -0.0090817 ])
# bottom = np.array([0.00930973, 0.00889312, 0.0084892 , 0.00809799, 0.00771947,
#        0.00735365, 0.00700052, 0.0066601 , 0.00633237, 0.00601733,
#        0.005715  , 0.00542536, 0.00514842, 0.00488418, 0.00463263,
#        0.00439378, 0.00416763, 0.00395417, 0.00375341, 0.00356535,
#        0.00338999, 0.00322733, 0.00307736, 0.00294008, 0.00281551,
#        0.00270363, 0.00260445, 0.00251797, 0.00244418, 0.0023831 ,
#        0.00233471, 0.00229901, 0.00227601, 0.00226571, 0.00226811,
#        0.00228321, 0.002311  , 0.00235149, 0.00240468, 0.00247056,
#        0.00254914, 0.00264042, 0.00274439, 0.00286107, 0.00299044,
#        0.0031325 , 0.00328727, 0.00345473, 0.00363489, 0.00382774,
#        0.00382536, 0.00362773, 0.0034428 , 0.00327057, 0.00311104,
#        0.0029642 , 0.00283006, 0.00270862, 0.00259987, 0.00250382,
#        0.00242047, 0.00234982, 0.00229186, 0.0022466 , 0.00221404,
#        0.00219418, 0.00218701, 0.00219254, 0.00221077, 0.00224169,
#        0.00228531, 0.00234163, 0.00241064, 0.00249236, 0.00258677,
#        0.00269387, 0.00281368, 0.00294618, 0.00309138, 0.00324928,
#        0.00341987, 0.00360316, 0.00379915, 0.00400783, 0.00422921,
#        0.00446329, 0.00471007, 0.00496954, 0.00524171, 0.00552658,
#        0.00582415, 0.00613441, 0.00645737, 0.00679303, 0.00714138,
#        0.00750243, 0.00787618, 0.00826263, 0.00866177, 0.00907361])
